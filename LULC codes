LULC code for Rourkela

 Define start date and end date
var startDate = '2024-01-01';
var endDate = '2024-07-31';

//3. Load DYNAMIC WORLD Data
var dw = ee.ImageCollection('GOOGLE/DYNAMICWORLD/V1')
.filterDate(startDate, endDate);
//.filterBounds(roi);

//4. Clip with countries boundaries

//var dwImage = ee.Image(dw.mosaic()); //.clip(roi);
var dwImage = ee.Image(dw.mosaic()).clip(roi);

print('DW ee.Image', dwImage) ;

//5. Display the the classified image using the label band.
var classification = dwImage.select('label');
var dwVisParams = {
min: 0,
max: 8,
 palette: ['#419BDF', '#397D49', '#888053', '#7A87C6', '#E49635', '#DFC35A', '#C4281B', '#A59B8F', '#B39FE1']
};


LST Rourkela

Import LST image collection.
var modis = ee.ImageCollection("MODIS/061/MOD11A2")

// Define a date range of interest; here, a start date is defined and the end
// date is determined by advancing 1 year from the start date.
var start = ee.Date('2023-01-01');
var dateRange = ee.DateRange(start, start.advance(1, 'year'));

// Filter the LST collection to include only images intersecting the desired
// date range.
var mod11a2 = modis.filterDate(dateRange);

// Select the 1km day and 1km night LST  data band.
var modLST = mod11a2.select('LST_Day_1km', 'LST_Night_1km');
print(modLST);

// Scale to Kelvin and convert to Celsius, set image acquisition time.
var modLSTc = modLST.map(function(img) {
  return img
    .multiply(0.02)
    .subtract(273.15)
    .copyProperties(img, ['system:time_start']);
});

print('converted',  modLSTc);



Prediction Rourkela

Land cover parameter
var values = [0, 1, 2, 3, 4, 5, 6, 7];
var palette = [
  '419BDF', '397D49', '888053', '7A87C6', 'E49635', 'DFC35A', 'C4281B', 'A59B8F'
];
var names = [
  'Water', 'Trees', 'Grass', 'Crop', 'Shrubs','Flodded vegetatio','Builtup area', 'Bare Ground' 
];

// Show legend
legend(palette, values, names);

// Land cover dictionary for visualization
var lulcDict = {
  'LULC_class_palette': palette,
  'LULC_class_values': values,
  'LULC_class_names': names
};

// Land cover data for 2016 and 2023
var lulc2016 = ee.Image('projects/ee-kaisamsameer/assets/JHAR_Dynamic_World_2016');
var lulc2023 = ee.Image('projects/ee-kaisamsameer/assets/JHAR_Dynamic_World_2023');

// Region of interest
var roi = lulc2016.geometry();

// Put the land cover in a list
var lulcList = [
  { year: 2016, image: lulc2016 },
  { year: 2023, image: lulc2023 }
];

// Show the 2016 and 2023 land cover
lulcList.map(function(dict){
  Map.addLayer(dict.image.set(lulcDict), {}, 'LULC ' + dict.year);
});

// Create land cover change map
var changeValues = [];
var changeNames = [];
var changeMap = ee.Image(0);
values.map(function(value1, index1){
  values.map(function(value2, index2){
    var changeValue = value1 * 1e2 + value2;
    changeValues.push(changeValue);
    
    var changeName = names[index1] + ' -> ' + names[index2];
    changeNames.push(changeName);
    
    changeMap = changeMap.where(lulcList[0].image.eq(value1).and(lulcList[1].image.eq(value2)), changeValue);
  });
});

// Show the change map
changeMap = changeMap.selfMask();
Map.addLayer(changeMap, { min: 101, max: 1010, palette: palette }, 'Land cover change map');

// Print the change dictionary
var changeDict = ee.Dictionary.fromLists(changeValues.map(function(value){ return String(value) }), changeNames);
print('Land cover change values', changeDict);

var model = ee.Classifier.smileRandomForest(10).train(train, predictName, propNames);

// Test model accuracy
var cm = test.classify(model, 'prediction').errorMatrix('end', 'prediction');
print(
  'Confusion matrix', cm,
  ee.String('Accuracy: ').cat(ee.String(cm.accuracy())),
  ee.String('Kappa: ').cat(ee.String(cm.kappa()))
);

// Apply the model for the variables for 2023
var pre_lulc2023 = variables.classify(model, 'LULC').set(lulcDict);
Map.addLayer(pre_lulc2023, {}, 'LULC 2023 Prediction');
